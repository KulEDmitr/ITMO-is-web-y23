// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id       String     @id @default(uuid()) @db.Uuid
  login    String     @unique
  password String
  email    String     @unique
  name     String?
  posts    Post[]
  pictures Picture[]
  jobs     JobPlace[]
}

model JobPlace {
  id          Int       @id @default(autoincrement())
  startDate   DateTime  @default(now()) @db.Date
  endDate     DateTime? @db.Date
  position    String
  place       String
  description String?
  hidden      Boolean?  @default(false) @db.Boolean
  worker      User      @relation(fields: [workerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workerId    String    @db.Uuid
}

model Post {
  id         Int               @id @default(autoincrement())
  title      String
  content    String?
  published  Boolean?          @default(false) @db.Boolean
  author     User              @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId   String            @db.Uuid
  categories CategoryOnPosts[]
}

model CategoryOnPosts {
  id       Int          @default(autoincrement())
  post     Post         @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  category PostCategory @relation(fields: [catId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId   Int
  catId    Int

  @@id([postId, catId])
}

model PostCategory {
  id    Int               @id @default(autoincrement())
  name  String            @unique
  posts CategoryOnPosts[]
}

model Picture {
  id          Int                  @id @default(autoincrement())
  title       String
  image       String
  description String?
  owner       User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId     String               @db.Uuid
  categories  CategoryOnPictures[]
}

model CategoryOnPictures {
  id       Int             @default(autoincrement())
  picture  Picture         @relation(fields: [picId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  category PictureCategory @relation(fields: [catId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  picId    Int
  catId    Int

  @@id([picId, catId])
}

model PictureCategory {
  id       Int                  @id @default(autoincrement())
  name     String               @unique
  pictures CategoryOnPictures[]
}
